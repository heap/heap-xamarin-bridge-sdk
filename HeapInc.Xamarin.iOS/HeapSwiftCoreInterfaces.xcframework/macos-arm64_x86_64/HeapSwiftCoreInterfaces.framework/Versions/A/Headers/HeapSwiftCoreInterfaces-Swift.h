#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef HEAPSWIFTCOREINTERFACES_SWIFT_H
#define HEAPSWIFTCOREINTERFACES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HeapSwiftCoreInterfaces",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
enum HeapLogLevel : NSInteger;

/// DO NOT USE
/// This class is an internal implementation detail of the SDK and should NOT be used
/// directly by developers implementing the SDK. It is public for internal purposes only.
/// Please refer to the SDK documentation for the appropriate public classes and methods
/// to use when integrating the SDK into your project.
/// Central logging class for all log messages that are printed from the Heap SDK.
/// All log messages and exceptions must go through this logger to respect client
/// defined log levels.
SWIFT_CLASS("_TtC23HeapSwiftCoreInterfaces10HeapLogger")
@interface HeapLogger : NSObject
/// The shared HeapLogger instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapLogger * _Nonnull sharedInstance;)
+ (HeapLogger * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The level of logging to be performed by the HeapLogger.
@property (nonatomic) enum HeapLogLevel logLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

SWIFT_PROTOCOL("_TtP23HeapSwiftCoreInterfaces21HeapObjcPropertyValue_")
@protocol HeapObjcPropertyValue <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull heapValue;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, HeapLogLevel, "LogLevel", open) {
/// Heap will not print any log messages.
  HeapLogLevelNone = 0,
/// Heap will only print the most critical log messages, such as when the SDK encounters an error and needs to shutdown.
  HeapLogLevelError = 10,
/// Heap will print messages that about issues it encounters are useful in a production environment, such as when uploads
/// fail or data is lost or discarded.
/// This level also includes <code>error</code> messages.
  HeapLogLevelWarn = 20,
/// Heap will print messages that are useful in a production environment, such as when recording starts/stops, when a
/// batch of events is successfully sent, or when a new session has begun.
/// This level is recommended for production environments so that developers can see Heap lifecycle
/// messages in their own logging environment.
/// This level also includes <code>error</code> and <code>warn</code> messages.
  HeapLogLevelInfo = 30,
/// Heap will print messages that the implementing developer might find helpful. Messages might include things such as
/// invalid environment ID value, truncated event names, or attempting to track an event before recording has started.
/// This level is recommended for implementing developers during the development process to help with debugging
/// normal installation and tracking issues.
/// This level also includes <code>error</code>, <code>warn</code>, and <code>info</code> messages.
  HeapLogLevelDebug = 40,
/// Heap will print message that help the Heap team diagnose SDK issues. Heap support might ask the implementing
/// developers to enable this log level to gain better insight into issues developers are encounter when implementing the Heap SDK.
/// Full event details are also printed at this level.
/// This level is recommended when gathering information to send to Heap support personnel. Heap support might also ask
/// that this level be turned on to help debug installation and tracking issues that require extra investigation.
/// This level also includes <code>error</code>, <code>warn</code>, <code>info</code>, and <code>debug</code> messages.
  HeapLogLevelTrace = 50,
};


@interface NSNumber (SWIFT_EXTENSION(HeapSwiftCoreInterfaces)) <HeapObjcPropertyValue>
@property (nonatomic, readonly, copy) NSString * _Nonnull heapValue;
@end


@interface NSString (SWIFT_EXTENSION(HeapSwiftCoreInterfaces)) <HeapObjcPropertyValue>
@property (nonatomic, readonly, copy) NSString * _Nonnull heapValue;
@end

enum OptionType : NSInteger;

SWIFT_CLASS_NAMED("Option")
@interface HeapOption : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (HeapOption * _Nonnull)registerWithName:(NSString * _Nonnull)name type:(enum OptionType)type SWIFT_WARN_UNUSED_RESULT;
+ (HeapOption * _Nullable)named:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HeapOption (SWIFT_EXTENSION(HeapSwiftCoreInterfaces)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



@interface HeapOption (SWIFT_EXTENSION(HeapSwiftCoreInterfaces))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull uploadInterval;)
+ (HeapOption * _Nonnull)uploadInterval SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull baseUrl;)
+ (HeapOption * _Nonnull)baseUrl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull messageBatchByteLimit;)
+ (HeapOption * _Nonnull)messageBatchByteLimit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull messageBatchMessageLimit;)
+ (HeapOption * _Nonnull)messageBatchMessageLimit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull captureAdvertiserId;)
+ (HeapOption * _Nonnull)captureAdvertiserId SWIFT_WARN_UNUSED_RESULT;
@end


@interface HeapOption (SWIFT_EXTENSION(HeapSwiftCoreInterfaces))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disablePageviewAutocapture;)
+ (HeapOption * _Nonnull)disablePageviewAutocapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disablePageviewTitleCapture;)
+ (HeapOption * _Nonnull)disablePageviewTitleCapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disableInteractionAutocapture;)
+ (HeapOption * _Nonnull)disableInteractionAutocapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disableInteractionTextCapture;)
+ (HeapOption * _Nonnull)disableInteractionTextCapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull startSessionImmediately;)
+ (HeapOption * _Nonnull)startSessionImmediately SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disableInteractionAccessibilityLabelCapture;)
+ (HeapOption * _Nonnull)disableInteractionAccessibilityLabelCapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disableInteractionReferencingPropertyCapture;)
+ (HeapOption * _Nonnull)disableInteractionReferencingPropertyCapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull interactionHierarchyCaptureLimit;)
+ (HeapOption * _Nonnull)interactionHierarchyCaptureLimit SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, OptionType, open) {
  OptionTypeString = 0,
  OptionTypeBoolean = 1,
  OptionTypeTimeInterval = 2,
  OptionTypeInteger = 3,
  OptionTypeUrl = 4,
  OptionTypeData = 5,
  OptionTypeObject = 6,
};


SWIFT_CLASS_NAMED("SourceInfo")
@interface HeapSourceInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HeapSourceInfo (SWIFT_EXTENSION(HeapSwiftCoreInterfaces))
+ (HeapSourceInfo * _Nonnull)sourceInfoWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version platform:(NSString * _Nonnull)platform properties:(NSDictionary<NSString *, id <HeapObjcPropertyValue>> * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
+ (HeapSourceInfo * _Nonnull)sourceInfoWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version platform:(NSString * _Nonnull)platform SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef HEAPSWIFTCOREINTERFACES_SWIFT_H
#define HEAPSWIFTCOREINTERFACES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HeapSwiftCoreInterfaces",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
enum HeapLogLevel : NSInteger;

/// DO NOT USE
/// This class is an internal implementation detail of the SDK and should NOT be used
/// directly by developers implementing the SDK. It is public for internal purposes only.
/// Please refer to the SDK documentation for the appropriate public classes and methods
/// to use when integrating the SDK into your project.
/// Central logging class for all log messages that are printed from the Heap SDK.
/// All log messages and exceptions must go through this logger to respect client
/// defined log levels.
SWIFT_CLASS("_TtC23HeapSwiftCoreInterfaces10HeapLogger")
@interface HeapLogger : NSObject
/// The shared HeapLogger instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapLogger * _Nonnull sharedInstance;)
+ (HeapLogger * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The level of logging to be performed by the HeapLogger.
@property (nonatomic) enum HeapLogLevel logLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

SWIFT_PROTOCOL("_TtP23HeapSwiftCoreInterfaces21HeapObjcPropertyValue_")
@protocol HeapObjcPropertyValue <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull heapValue;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, HeapLogLevel, "LogLevel", open) {
/// Heap will not print any log messages.
  HeapLogLevelNone = 0,
/// Heap will only print the most critical log messages, such as when the SDK encounters an error and needs to shutdown.
  HeapLogLevelError = 10,
/// Heap will print messages that about issues it encounters are useful in a production environment, such as when uploads
/// fail or data is lost or discarded.
/// This level also includes <code>error</code> messages.
  HeapLogLevelWarn = 20,
/// Heap will print messages that are useful in a production environment, such as when recording starts/stops, when a
/// batch of events is successfully sent, or when a new session has begun.
/// This level is recommended for production environments so that developers can see Heap lifecycle
/// messages in their own logging environment.
/// This level also includes <code>error</code> and <code>warn</code> messages.
  HeapLogLevelInfo = 30,
/// Heap will print messages that the implementing developer might find helpful. Messages might include things such as
/// invalid environment ID value, truncated event names, or attempting to track an event before recording has started.
/// This level is recommended for implementing developers during the development process to help with debugging
/// normal installation and tracking issues.
/// This level also includes <code>error</code>, <code>warn</code>, and <code>info</code> messages.
  HeapLogLevelDebug = 40,
/// Heap will print message that help the Heap team diagnose SDK issues. Heap support might ask the implementing
/// developers to enable this log level to gain better insight into issues developers are encounter when implementing the Heap SDK.
/// Full event details are also printed at this level.
/// This level is recommended when gathering information to send to Heap support personnel. Heap support might also ask
/// that this level be turned on to help debug installation and tracking issues that require extra investigation.
/// This level also includes <code>error</code>, <code>warn</code>, <code>info</code>, and <code>debug</code> messages.
  HeapLogLevelTrace = 50,
};


@interface NSNumber (SWIFT_EXTENSION(HeapSwiftCoreInterfaces)) <HeapObjcPropertyValue>
@property (nonatomic, readonly, copy) NSString * _Nonnull heapValue;
@end


@interface NSString (SWIFT_EXTENSION(HeapSwiftCoreInterfaces)) <HeapObjcPropertyValue>
@property (nonatomic, readonly, copy) NSString * _Nonnull heapValue;
@end

enum OptionType : NSInteger;

SWIFT_CLASS_NAMED("Option")
@interface HeapOption : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (HeapOption * _Nonnull)registerWithName:(NSString * _Nonnull)name type:(enum OptionType)type SWIFT_WARN_UNUSED_RESULT;
+ (HeapOption * _Nullable)named:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HeapOption (SWIFT_EXTENSION(HeapSwiftCoreInterfaces)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



@interface HeapOption (SWIFT_EXTENSION(HeapSwiftCoreInterfaces))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull uploadInterval;)
+ (HeapOption * _Nonnull)uploadInterval SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull baseUrl;)
+ (HeapOption * _Nonnull)baseUrl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull messageBatchByteLimit;)
+ (HeapOption * _Nonnull)messageBatchByteLimit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull messageBatchMessageLimit;)
+ (HeapOption * _Nonnull)messageBatchMessageLimit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull captureAdvertiserId;)
+ (HeapOption * _Nonnull)captureAdvertiserId SWIFT_WARN_UNUSED_RESULT;
@end


@interface HeapOption (SWIFT_EXTENSION(HeapSwiftCoreInterfaces))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disablePageviewAutocapture;)
+ (HeapOption * _Nonnull)disablePageviewAutocapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disablePageviewTitleCapture;)
+ (HeapOption * _Nonnull)disablePageviewTitleCapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disableInteractionAutocapture;)
+ (HeapOption * _Nonnull)disableInteractionAutocapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disableInteractionTextCapture;)
+ (HeapOption * _Nonnull)disableInteractionTextCapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull startSessionImmediately;)
+ (HeapOption * _Nonnull)startSessionImmediately SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disableInteractionAccessibilityLabelCapture;)
+ (HeapOption * _Nonnull)disableInteractionAccessibilityLabelCapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull disableInteractionReferencingPropertyCapture;)
+ (HeapOption * _Nonnull)disableInteractionReferencingPropertyCapture SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HeapOption * _Nonnull interactionHierarchyCaptureLimit;)
+ (HeapOption * _Nonnull)interactionHierarchyCaptureLimit SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, OptionType, open) {
  OptionTypeString = 0,
  OptionTypeBoolean = 1,
  OptionTypeTimeInterval = 2,
  OptionTypeInteger = 3,
  OptionTypeUrl = 4,
  OptionTypeData = 5,
  OptionTypeObject = 6,
};


SWIFT_CLASS_NAMED("SourceInfo")
@interface HeapSourceInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HeapSourceInfo (SWIFT_EXTENSION(HeapSwiftCoreInterfaces))
+ (HeapSourceInfo * _Nonnull)sourceInfoWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version platform:(NSString * _Nonnull)platform properties:(NSDictionary<NSString *, id <HeapObjcPropertyValue>> * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
+ (HeapSourceInfo * _Nonnull)sourceInfoWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version platform:(NSString * _Nonnull)platform SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
